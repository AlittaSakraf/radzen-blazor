@using System.Text.RegularExpressions;
@inject IJSRuntime JSRuntime
@inject CompilerService Compiler

<RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0.5rem" Class="rz-p-2" Style="border-bottom: var(--rz-border-disabled);">
    <RadzenButton Click="Run" Text="Run" Icon="play_circle_outline" Size="ButtonSize.ExtraSmall" Variant="Variant.Text" Title="Preview edits" Class="rz-text-truncate" />
    <button class="rz-button rz-button-xs rz-variant-text rz-primary  rz-shade-default rz-text-truncate" Title="Copy source code" onclick=@Copy >
        <RadzenIcon Icon="content_copy" />
        Copy
    </button>
    <RadzenButton Text="Github" Icon="open_in_new" Size="ButtonSize.ExtraSmall" Variant="Variant.Text" Title="See in Github repository" Class="rz-text-truncate" />
</RadzenStack>
<RadzenAlert Visible=@(error != null) AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
    @error
</RadzenAlert>
<Monaco @bind-Value="source" @ref="@monaco" Style="border: var(--rz-border-disabled)" />
@code {
    private string Copy => $"copy('{monaco?.Id}')";
    private Monaco monaco;
    private ElementReference pre;
    private string source;
    private string error;

    [Parameter]
    public EventCallback<Type> Compiled { get; set; }

    [Parameter]
    public string PageName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var http = new HttpClient();

        source = await http.GetStringAsync($"https://raw.githubusercontent.com/radzenhq/radzen-blazor/compiler/RadzenBlazorDemos/Pages/{PageName}");
        source = Regex.Replace(source, "</?RadzenExample[^>]*>\n", "");
    }

    private async Task Run()
    {
        try
        {
            error = null;

            var type = await Compiler.CompileAsync(source);

            await Compiled.InvokeAsync(type);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
